class Math{


//les constantes utilisées dans la méthode de cody and waite .
	float C1 = 1.5f;
	float C2 = 7.079632679E-2f;
	float C3 = 4.8966E-12f;
	float C4 = 1.923E-17f;
	float C5 = 1.32169E-21f;
	float C6 = 1.63975144E-27f;
	float C7 = 2.098584E-36f;
	float C8 = 6.99687553E-43f;
	float  Pi = 3.14159265358979323846264338327950288419716939937510582f;
	float Pi_2 = 1.5707963267948966f;
	float Pi_4 = 0.7853981633974483f;
//Valeur maximale prise par les nombres flottants.
  float MAX_VALUE = power((float)(2),127);
//Valeur minimale prise par les nombres flottants.
  float MIN_VALUE = power((float)(2),-149);

float sin(float x){
	int iterations = 10;
	
	int k = round(x/(Pi_2));
	float xReduced = (((((((((x-k*C1)-k*C2)-k*C3))-k*C4)-k*C5)-k*C6) - k*C7) - k*C8);
	
  	float result = 1/(float) (factorial(2*iterations + 1));
  	int n = iterations - 1;
  	int i = 2*iterations;
	
	if (x < 0) {
	    return -sin(-x);
	}

	if (x > Pi_4) {

		if (k % 4 == 0) {
			return sin(xReduced);
		}
		else if (k % 4 == 1) {
			return cos(xReduced);
		}
	  	else if (k % 4 == 2) {
		  return -sin(xReduced);
    }
	  else {
		  return -cos(xReduced);
    }
  }

  while (i >= 0) {

	  if (i%2==0){
	   result = result*x + 0;
	  }
	  else{
	  	if (n % 2 == 0) {
	    result = result*x + 1 / (float) (factorial(i));
	    }
	   else {
	      result = result*x + -1/(float) (factorial(i));
	    }
	    n = n - 1;
	  }
	  i = i - 1;
	}
	return result;
}

	float cos(float x ){

		int iterations = 10;
	  int k = round(x/(Pi_2));
	  float xReduced=(((((((((x-k*C1)-k*C2)-k*C3))-k*C4)-k*C5)-k*C6) - k*C7) - k*C8 );
	  float result = 1/(float) (factorial(2*iterations));
	  int n = iterations - 1;
	  int i = 2*iterations-1;
	  if (x > Pi_4) {
		  if (k % 4 == 0) {
			  return cos(xReduced);
		  }
		  else if (k % 4 == 1) {
			  return -sin(xReduced);
		  }
		  else if (k % 4 == 2) {
			  return -cos(xReduced);
		  }
		  else {
			  return sin(xReduced);
		  }
	  }

	  while (i >= 0) {

		  if (i%2==1){
		    result = result*x + 0;
		  }
		  else{
		    if (n % 2 == 0) {
		      result = result*x + 1/(float) (factorial(i));
		    }
		    else {
		      result = result*x + -1/(float) (factorial(i));
		    }
		    n = n - 1;
	  	}
	  	i = i - 1;
	 }
	return result;
}


// une fonction qui calcule  atan(x) à l'aide des séries de taylor et le fait que atan(-x)=-atan(x)

float atan(float x){
  int iterations = 40;
  float result=0;
  int i=0;
  int j = 0;
  if (x< 0){
	  return -atan(-x);
  }
  else if(x>1.3){
	  return (Pi/2)-atan((float) (1/x));
  }
  if(x>0.7 && x<=1.3){
	  return 2*atan(x/(1+sqrt(1+power(x,2))));
  }


  while (i<iterations){
	  j=2*i+1;
	  if (i%2==0){
		  result = result + power(x,j)/j;
	  }
	  else{
		  result = result - power(x,j)/j;
	  }
	  i = i + 1;
  }
  return result;
}


float asin(float x){
	 if(abs(x)>1){
		 println("la valeur de x doit être compris entre -1 et 1 !!");
		 return 0;
	 }
	 if(x<0){
		 return -asin(-x);
	 }
	 else{
		 return atan(x/(sqrt(1-power(x,2))));
	 }
}


  // cette fonction calcule les puissances d'un float : x^^n
  float power(float x,int y){
      if (x==0.0 && y!=0){
        return 0;
      }
      if(y==0){
         return 1;
      }
      else if(y<0){
        return power(1/x,-y);
       }
      else if(y==1){
        return x;
      }
      else if (y%2==0){
        return power(x*x,y/2);
      }
      else{
        return x*power(x*x,(y-1)/2);
      }
	}


	int factorial(int n){
    	int result = 1;
		int i = n;
		while(i > 0) {
		    result = result*i;
		    i = i - 1;
		}
		return result;
  	}
 


	int exponent(float x){
    int exponent = 0;
    float y = x;
    if (y < 0) {
      return exponent(-y);
    }
    if (y < 1) {
      while (y < 1) {
        y = y * 2;
        exponent = exponent -1;
      }
      return exponent;
    }
    else {
      while (y >= 2) {
        y = y/2;
        exponent = exponent + 1;
      }
      return exponent;
   }
  }



	float ulp(float x){
    //on a ulp(-x)=ulp(x)
    if (x<0){
      return ulp(-x);
    }
    //les memes valeurs retournees par la fonction ulp de java
    else if(x==MIN_VALUE){
      return MIN_VALUE;
    }
    else if(x==MAX_VALUE){
      return power((float) (2),104);
    }
    else if (x==0){
      return MIN_VALUE;
    }
    else {
      return power((float) (2), exponent(x) - 23);
    }
  }

// calculer la valeur absolue d'un flottant x


	float abs(float x){
    if(x<=0){
      return -x;
    }
    else{
      return x;
    }
  }

  //une fonction qui calcule la racine carre d'un flottant avec la methode de newton
   float sqrt(float x) {
    int nbrIterations = 0;
	float sqrtt = 1;
	float temp = 0;	
    if (x<0) {
      println("ce nombre est negatif !");
      return 0;
    }
    else{
      
      while(nbrIterations < 200000){
        temp = sqrtt;
        sqrtt = 0.5f*(temp+(x/temp));
    	nbrIterations = nbrIterations + 1;
      }
    return sqrtt;
    }
  }
  
  int round(float f) asm
        ("LOAD -3(LB), R1
        INT R1, R1
        LOAD R1, R0");
}
